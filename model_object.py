from torch.nn import CrossEntropyLoss
from torch.optim import *
from Net import *
from utils.api import *
from loss_function import joint_loss, loss_in_IMF
from utils.basic import get_scheduler
from Dataset import *
from loss_function import loss_for_tirlighetNet
models = {
    'ITCFN': {
        'Name': 'Triple_model_CoAttention_Fusion',
        'Model': Triple_model_CoAttention_Fusion,
        'dataset': MriPetCliDataset,
        'shape': (96, 128, 96),
        'task': ("pMCI", "sMCI"),
        # 'task': ("AD", "CN"),
        # 'task': ("AD", "MCI", "CN"),
        'Loss': joint_loss,
        'Optimizer': Adam,
        'Lr': 0.0001,
        'w1': 0.2,
        'w2': 0.01,
        'weight_decay': None,
        'Scheduler': get_scheduler,
        'Run': run_main_1
    },
    'ITFN': {
        'Name': 'Triple_model_Fusion',
        'Model': Triple_model_Fusion,
        'dataset': MriPetCliDataset,
        'shape': (96, 128, 96),
        'task': ("pMCI", "sMCI"),
        #         'task': ("AD", "CN"),
        # 'task': ("AD", "MCI", "CN"),
        'Loss': joint_loss,
        'Optimizer': Adam,
        'Lr': 0.0001,
        'w1': 0.2,
        'w2': 0.01,
        'weight_decay': None,
        'Scheduler': get_scheduler,
        'Run': run_main_1
    },
    'TFN': {
        'Name': 'Triple_model_Fusion_Incomplete',
        'Model': Triple_model_Fusion,
        'dataset': MriPetCliDataset,
        'shape': (96, 128, 96),
        'task': ("pMCI", "sMCI"),
        #         'task': ("AD", "CN"),
        # 'task': ("AD", "MCI", "CN"),
        'Loss': joint_loss,
        'Optimizer': Adam,
        'Lr': 0.0001,
        'w1': 0.2,
        'w2': 0.01,
        'weight_decay': None,
        'Scheduler': get_scheduler,
        'Run': run_main_1
    },
    'TCFN': {
        'Name': 'Triple_model_CoAttention_Fusion_Incomplete',
        'Model': Triple_model_CoAttention_Fusion,
        'dataset': MriPetCliDataset,
        'shape': (96, 128, 96),
        'task': ("pMCI", "sMCI"),
        #         'task': ("AD", "CN"),
        # 'task': ("AD", "MCI", "CN"),
        'Loss': joint_loss,
        'Optimizer': Adam,
        'Lr': 0.0001,
        'w1': 0.2,
        'w2': 0.01,
        'weight_decay': None,
        'Scheduler': get_scheduler,
        'Run': run_main_1
    },
    'HFBSurv': {
        'Name': 'HFBSurv',
        'weight_decay': None,
        'Lr': 0.0001,
        'Model': HFBSurv,
        'dataset': MriPetCliDataset,
        'shape': (96, 128, 96),
        'task': ("pMCI", "sMCI"),
        #         'task': ("AD", "CN"),
        # 'task': ("AD", "MCI", "CN"),
        'Optimizer': Adam,
        'Loss': CrossEntropyLoss,
        'Scheduler': get_scheduler,
        'Run': run_main_for_hfbsurve,
    },
    'IMF': {
        'Name': 'Interactive_Multimodal_Fusion_Model',
        'Model': Interactive_Multimodal_Fusion_Model,
        'dataset': MriPetCliDatasetWithTowLabel,
        'shape': (96, 128, 96),
        'task': ("pMCI", "sMCI"),
        #         'task': ("AD", "CN"),
        # 'task': ("AD", "MCI", "CN"),
        'Loss': loss_in_IMF,
        'Optimizer': Adam,
        'Lr': 0.0001,
        'w1': 0.2,
        'w2': 0.01,
        'weight_decay': None,
        'Scheduler': get_scheduler,
        'Run': run_main_for_IMF,
    },
    'TriLightNet': {
        'Name': 'TriLightNet',
        'Model': TriLightNet,
        'dataset': MriPetCliDataset,
        'shape': (96, 128, 96),
        'Loss': loss_for_tirlighetNet,
        # 'task': ("pMCI", "sMCI"),
        'task': ("CN", "AD"),
        # 'task': ("MCI", "AD", "CN"),
        'Optimizer': Adam,
        'weight_decay': None,
        'Lr': 0.0001,
        'Run': run_main_for_trilight_net,
        'Scheduler': get_scheduler,
    },
    'TriLightNetWithoutCBAMWithCasCade': {
        'Name': 'TriLightNetWithoutCBAMWithCasCade',
        'Model': TriLightNetWithoutCBAMWithCasCade,
        'dataset': MriPetCliDataset,
        'shape': (96, 128, 96),
        'Loss': loss_for_tirlighetNet,
#         'task': ("pMCI", "sMCI"),
#         'task': ("CN", "AD"),
#         'task': ("CN", "MCI"),
        'task': ("MCI", "AD", "CN"),
        'Optimizer': Adam,
        'weight_decay': None,
        'Lr': 0.0001,
        'Run': run_main_for_trilight_net,
        'Scheduler': get_scheduler,
    },
    'TriLightNetWithCBAMWithOutCasCade': {
        'Name': 'TriLightNetWithCBAMWithOutCasCade',
        'Model': TriLightNetWithCBAMWithOutCasCade,
        'dataset': MriPetCliDataset,
        'shape': (96, 128, 96),
        'Loss': loss_for_tirlighetNet,
#         'task': ("pMCI", "sMCI"),
#         'task': ("CN", "AD"),
#         'task': ("CN", "MCI"),
        'task': ("MCI", "AD", "CN"),
        'Optimizer': Adam,
        'weight_decay': None,
        'Lr': 0.0001,
        'Run': run_main_for_trilight_net,
        'Scheduler': get_scheduler,
    },
    'TriLightNetWithOutCBAMWithoutCascade': {
        'Name': 'TriLightNetWithOutCBAMWithoutCascade',
        'Model': TriLightNetWithOutCBAMWithoutCascade,
        'dataset': MriPetCliDataset,
        'shape': (96, 128, 96),
        'Loss': loss_for_tirlighetNet,
#         'task': ("pMCI", "sMCI"),
#         'task': ("CN", "AD"),
#         'task': ("CN", "MCI"),
        'task': ("MCI", "AD", "CN"),
        'Optimizer': Adam,
        'weight_decay': None,
        'Lr': 0.0001,
        'Run': run_main_for_trilight_net,
        'Scheduler': get_scheduler,
    },
}
"""
    model = TriLightNet()
    model = TriLightNetWithoutCBAMWithCasCade()
    model = TriLightNetWithCBAMWithOutCasCade()
    model = TriLightNetWithOutCBAMWithoutCascade()
"""
